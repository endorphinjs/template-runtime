import { elem } from './dom';
import { assign, isDefined, isObject, obj, changeSet, nextTick } from './utils';
import { finalizeEvents } from './event';
import { finalizeProps } from './attribute';
import { createInjector } from './injector';
import { runHook, forEachHook } from './hooks';

/**
 * Creates internal lightweight Endorphin component with given definition
 * @param {string} name
 * @param {ComponentDefinition} definition
 * @param {Component} [host]
 * @returns {Component}
 */
export function createComponent(name, definition, host) {
	/** @type {Component} */
	const element = elem(name, host);
	element.refs = {};
	element.props = collectData(definition, 'props');
	element.state = collectData(definition, 'state');
	element.setProps = setProps;
	element.setState = setState;
	forEachHook(definition, 'methods', methods => assign(element, methods));

	// XXX Should point to Shadow Root in Web Components
	element.componentView = element;

	element.component = {
		definition,
		input: createInjector(element.componentView, true),
		vars: obj(),
		refs: changeSet(),
		mounted: false,
		rendering: false,
		update: null,
		queued: null
	};

	runHook(element, 'init');

	return element;
}

/**
 * Mounts given component
 * @param {Component} elem
 * @param {object} [initialProps]
 */
export function mountComponent(elem, initialProps) {
	const { component } = elem;
	const { input, definition } = component;
	elem.slots = input.slots;
	finalizeEvents(input);
	finalizeProps(input, initialProps);

	component.rendering = true;
	runHook(elem, 'willMount');
	if (definition.default) {
		runHook(elem, 'willRender');
		component.update = definition.default(elem);
		runHook(elem, 'didRender');
	}
	runHook(elem, 'didMount');
	component.rendering = false;
	component.mounted = true;
}

/**
 * Updates given mounted component
 * @param {Component} elem
 * @param {object} initialProps
 */
export function updateComponent(elem) {
	const { component } = elem;
	const { input, update } = component;
	finalizeEvents(input);
	finalizeProps(input);

	// TODO prepare data for hooks in `mountComponent`?
	component.queued = null;
	component.rendering = true;
	runHook(elem, 'willUpdate');
	if (update) {
		runHook(elem, 'willRender');
		update(elem);
		runHook(elem, 'didRender');
	}
	runHook(elem, 'didUpdate');
	component.rendering = false;
}

/**
 * Queues next component render
 * @param {Component} elem
 */
function updateNext(elem) {
	const { component } = elem;
	if (!component.rendering) {
		updateComponent(elem);
	} else if (!component.queued) {
		component.queued = nextTick(() => updateComponent(elem));
	}
}

/**
 * Updates properties of context component
 * @param {object} value
 * @param {boolean} [silent]
 * @this Component
 */
function setProps(value, silent) {
	if (isObject(value)) {
		assign(this.props, value);
		representProps(this, value);
		!silent && this.component.mounted && updateNext(this);
	}
}

/**
 * Updates state of context component
 * @param {object} value
 * @param {boolean} [silent]
 */
function setState(value, silent) {
	if (isObject(value) && assignIfNeeded(this.state, value) && !silent && this.component.mounted) {
		updateNext(this);
	}
}

/**
 * Assign data from `next` to `prev` if there are any updates
 * @param {object} prev
 * @param {object} next
 * @return {boolean} Returns `true` if data was assigned
 */
function assignIfNeeded(prev, next) {
	for (const p in next) {
		if (next.hasOwnProperty(p) && prev[p] !== next[p]) {
			return assign(prev, next);
		}
	}
}

/**
 * Collects data generated by `key` factory
 * @param {ComponentDefinition} definition
 * @param {string} key
 * @return {object} initial
 */
function collectData(definition, key) {
	const data = {};
	forEachHook(definition, key, hook => assign(data, hook()));
	return data;
}

/**
 * Represents given props as attribute values in `elem`
 * @param {HTMLElement} elem
 * @param {object} props
 */
function representProps(elem, props) {
	for (const p in props) {
		let value = props[p];
		const type = typeof(value);

		if (type === 'boolean') {
			value = value ? '' : null;
		} else if (type === 'function') {
			value = 'ùëì';
		} else if (Array.isArray(value)) {
			value = '[]';
		} else if (isDefined(value) && type === 'object') {
			value = '{}';
		}

		isDefined(value) ? elem.setAttribute(p, value) : elem.removeAttribute(p);
	}
}
