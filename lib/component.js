import { elem } from './dom';
import { assign, isDefined, isObject, obj, changeSet } from './utils';
import { finalizeEvents } from './event';
import { finalizeProps } from './attribute';
import { createInjector } from './injector';
import { runHook, forEachHook } from './hooks';

/**
 * Creates internal lightweight Endorphin component with given definition
 * @param {string} name
 * @param {ComponentDefinition} definition
 * @param {Comment} [host]
 * @returns {Component}
 */
export function createComponent(name, definition, host) {
	const element = elem(name, host);
	element.refs = {};
	element.props = collectData(definition, 'props');
	element.state = collectData(definition, 'state');
	forEachHook(definition, 'methods', methods => assign(element, methods));

	// XXX Should point to Shadow Root in Web Components
	element.componentView = element;

	const component = {
		element,
		definition,
		injector: createInjector(element.componentView, true),
		vars: obj(),
		refs: changeSet(),
		stack: [],
		update: null
	};

	element.setProps = (value, silent) => {
		if (isObject(value)) {
			assign(element.props, value);
			representProps(element, value);
			!silent && renderComponent(component);
		}
	};

	element.setState = (value, silent) => {
		if (isObject(value) && assignIfNeeded(element.state, value) && !silent) {
			renderComponent(component);
		}
	};

	runHook(component, 'init');

	return component;
}

/**
 * Mounts given component
 * @param {Component} component
 * @param {object} [initialProps]
 */
export function mountComponent(component, initialProps) {
	const { element, injector } = component;
	element.slots = injector.slots;
	finalizeEvents(injector);
	finalizeProps(injector, initialProps);

	runHook(component, 'willMount');
	renderComponent(component);
	runHook(component, 'didMount');
}

/**
 * Updates given mounted component
 * @param {Component} component
 * @param {object} initialProps
 */
export function updateComponent(component) {
	const { injector } = component;
	finalizeEvents(injector);
	finalizeProps(injector);

	runHook(component, 'willUpdate');
	renderComponent(component);
	runHook(component, 'didUpdate');
}

/**
 * Renders given component
 * @param {Component} component
 */
export function renderComponent(component) {
	const { update, definition } = component;

	runHook(component, 'willRender');
	if (update) {
		update(component);
	} else if (definition.default) {
		component.update = definition.default(component);
	}
	runHook(component, 'didRender');
}

/**
 * Assign data from `next` to `prev` if there are any updates
 * @param {object} prev
 * @param {object} next
 * @return {boolean} Retruns `true` if data is assigned
 */
function assignIfNeeded(prev, next) {
	for (const p in next) {
		if (next.hasOwnProperty(p) && prev[p] !== next[p]) {
			return assign(prev, next);
		}
	}
}

/**
 * Collects data generated by `key` factory
 * @param {ComponentDefinition} definition
 * @param {string} key
 * @return {object} initial
 */
function collectData(definition, key) {
	const data = {};
	forEachHook(definition, key, hook => assign(data, hook()));
	return data;
}

/**
 * Represents given props as attribute values in `elem`
 * @param {HTMLElement} elem
 * @param {object} props
 */
function representProps(elem, props) {
	for (const p in props) {
		let value = props[p];
		const type = typeof(value);

		if (type === 'boolean') {
			value = value ? '' : null;
		} else if (type === 'function') {
			value = 'ùëì';
		} else if (Array.isArray(value)) {
			value = '[]';
		} else if (isDefined(value) && type === 'object') {
			value = '{}';
		}

		isDefined(value) ? elem.setAttribute(p, value) : elem.removeAttribute(p);
	}
}
